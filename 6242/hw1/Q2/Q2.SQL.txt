-- Setup. DO NOT REMOVE.
.headers on
.mode list
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies (
	id int, 
	name text,
	score int
);

CREATE TABLE cast (
	movie_id int, 
	cast_id int, 
	cast_name text
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import movie-name-score.txt movies
.import movie-cast.txt cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index
ON movies (score);

CREATE INDEX cast_index
ON cast (cast_id);

CREATE INDEX movie_index
ON movies (id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]

.print 'average_score'
.headers off
SELECT AVG(score) FROM movies
WHERE score >= 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

.print 'id,name,score'
SELECT * FROM movies
ORDER BY score ASC, name
LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]

.print 'cast_id,cast_name,movie_count'
.headers off
SELECT cast_id, cast_name, COUNT(cast_id)
FROM cast
GROUP BY cast_id, cast_name HAVING COUNT(cast_id) = 2
ORDER BY cast_name
LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

.print 'cast_id,cast_name,average_score'
.headers off
SELECT 'cast'.cast_id,'cast'.cast_name, AVG('movies'.score) 
FROM cast 
INNER JOIN movies ON 'cast'.movie_id = 'movies'.id
WHERE score > 40
GROUP BY cast_id, cast_name
HAVING COUNT(cast_id) > 2 
ORDER BY AVG(score) DESC, cast_name
LIMIT 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS
SELECT a.cast_id AS cast_member_id1, b.cast_id AS cast_member_id2, 'movies'.id AS movie_count, AVG('movies'.score) AS average_movie_score
FROM ((movies 
INNER JOIN cast AS a ON 'movies'.id = a.movie_id)
INNER JOIN cast AS b ON 'movies'.id = b.movie_id)
WHERE a.cast_id < b.cast_id 
GROUP BY a.cast_id, b.cast_id
HAVING COUNT(*)>=3 AND AVG('movies'.score)>=50;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'
-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

.print 'cast_id,cast_name,collaboration_score'
.headers off
SELECT selected_view.cid, 'cast'.cast_name, selected_view.collaboration_score
FROM 
(
	SELECT cid, AVG(average_movie_score) as collaboration_score 
	FROM
	(SELECT cast_member_id1 AS cid, average_movie_score FROM good_collaboration 
	UNION ALL
	SELECT cast_member_id2 AS cid, average_movie_score FROM good_collaboration)
	GROUP BY cid
) AS selected_view
INNER JOIN cast ON selected_view.cid = 'cast'.cast_id
GROUP BY selected_view.cid, 'cast'.cast_name, selected_view.collaboration_score
ORDER BY selected_view.collaboration_score DESC, 'cast'.cast_name
LIMIT 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING FTS4(
	id INTEGER, 
	name TEXT,
	year INTEGER,
	overview TEXT,
	popularity DECIMAL
);

.import movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

.print 'count_overview'
.headers off
SELECT COUNT(movie_overview.id) FROM movie_overview WHERE overview MATCH 'fight';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

.print 'id'
.headers off
SELECT movie_overview.id FROM movie_overview WHERE overview MATCH 'love NEAR/5 story';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --